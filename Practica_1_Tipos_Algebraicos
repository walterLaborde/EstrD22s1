--1. Números enteros

-- 1. Defina las siguientes funciones:

-- a) 
sucesor :: Int -> Int
-- Dado un número devuelve su sucesor

sucesor n = n+1

-- b) 
sumar :: Int -> Int -> Int
-- Dados dos números devuelve su suma utilizando la operación +.

sumar n m = n+m

--c) 
divisionYResto :: Int -> Int -> (Int, Int)
{- Dado dos números, devuelve un par donde la primera componente es la división del
primero por el segundo, y la segunda componente es el resto de dicha división. Nota:
para obtener el resto de la división utilizar la función mod :: Int -> Int -> Int,
provista por Haskell.-}

divisionYResto n m = (div n m,mod n m)

--d) 
maxDelPar :: (Int,Int) -> Int
-- Dado un par de números devuelve el mayor de estos.

maxDelPar (n,m) = if (n>m)
                    then n 
                    else m


-- 2. De 4 ejemplos de expresiones diferentes que denoten el número 10, utilizando en cada expresión
-- a todas las funciones del punto anterior.
-- Ejemplo: maxDePar (divisionYResto (suma 5 5) (sucesor 0))

-- maxDelPar(divisionYResto 40 (sucesor 3))

-- maxDelPar(divisionYResto (sumar 9 1) (sucesor 0))

-- sumar 0 (maxDelPar(divisionYResto (sumar 9 1) (sucesor 0)))
